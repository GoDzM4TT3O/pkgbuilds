#!/bin/bash
# this is an alternative script, targeted towards debian/ubuntu

# set local variables
pkgver="5.10.10"
pkgbase="linux-ck"
pkgrel=2
_ckpatchversion=1
_ckpatch="patch-5.10-ck${_ckpatchversion}"
_gcc_more_v='20201113'

### BUILD OPTIONS
# Set these variables to ANYTHING that is not null to enable them

# Tweak kernel options prior to a build via nconfig
_makenconfig=

# Optionally select a sub architecture by number if building in a clean chroot
# Leaving this entry blank will require user interaction during the build
# which will cause a failure to build if using makechrootpkg. Note that the
# generic (default) option is 32.
#
# Note - the march=native option is unavailable by this method, use the nconfig
# and manually select it.
#
#  1. AMD Opteron/Athlon64/Hammer/K8 (MK8)
#  2. AMD Opteron/Athlon64/Hammer/K8 with SSE3 (MK8SSE3)
#  3. AMD 61xx/7x50/PhenomX3/X4/II/K10 (MK10)
#  4. AMD Barcelona (MBARCELONA)
#  5. AMD Bobcat (MBOBCAT)
#  6. AMD Jaguar (MJAGUAR)
#  7. AMD Bulldozer (MBULLDOZER)
#  8. AMD Piledriver (MPILEDRIVER)
#  9. AMD Steamroller (MSTEAMROLLER)
#  10. AMD Excavator (MEXCAVATOR)
#  11. AMD Zen (MZEN)
#  12. AMD Zen 2 (MZEN2)
#  13. Intel P4 / older Netburst based Xeon (MPSC)
#  14. Intel Atom (MATOM)
#  15. Intel Core 2 (MCORE2)
#  16. Intel Nehalem (MNEHALEM)
#  17. Intel Westmere (MWESTMERE)
#  18. Intel Silvermont (MSILVERMONT)
#  19. Intel Goldmont (MGOLDMONT)
#  20. Intel Goldmont Plus (MGOLDMONTPLUS)
#  21. Intel Sandy Bridge (MSANDYBRIDGE)
#  22. Intel Ivy Bridge (MIVYBRIDGE)
#  23. Intel Haswell (MHASWELL)
#  24. Intel Broadwell (MBROADWELL)
#  25. Intel Skylake (MSKYLAKE)
#  26. Intel Skylake X (MSKYLAKEX)
#  27. Intel Cannon Lake (MCANNONLAKE)
#  28. Intel Ice Lake (MICELAKE)
#  29. Intel Cascade Lake (MCASCADELAKE)
#  30. Intel Cooper Lake (MCOOPERLAKE)
#  31. Intel Tiger Lake (MTIGERLAKE)
#  32. Generic-x86-64 (GENERIC_CPU)
#  33. Native optimizations autodetected by GCC (MNATIVE)

# Generic (Highly recommended you change this)
_subarch=32

# install the required packages
sudo apt-get install git build-essential bc kmod libelf-dev cpio perl tar xz-utils wget kernel-package fakeroot libssl-dev flex bison

# use directory /usr/share/linux/linux-ck-$pkgver
kerneldir="/usr/share/linux/linux-ck-$pkgver"
sudo mkdir -p $kerneldir
# change ownership to current user
sudo chown $(whoami):$(whoami) -R $kerneldir
# get inside the newly created directory
cd $kerneldir

# get the latest kernel image if it doesn't exist
[ -f "linux-$pkgver.tar.xz" ] || wget "https://www.kernel.org/pub/linux/kernel/v5.x/linux-$pkgver.tar.xz"

# use gcc optimizations (download them if they don't exist)
[ -f "enable_additional_cpu_optimizations-$_gcc_more_v.tar.gz" ] || wget "https://github.com/graysky2/kernel_gcc_patch/archive/$_gcc_more_v.tar.gz" -O "enable_additional_cpu_optimizations-$_gcc_more_v.tar.gz"

# get the ck patchset if it doesn't exist
[ -f "$_ckpatch.xz" ] || wget "http://ck.kolivas.org/patches/5.0/5.10/5.10-ck${_ckpatchversion}/$_ckpatch.xz"

# untar the kernel archive
tar xf linux-$pkgver.tar.xz

# extract the ck patchset 
xz -d $_ckpatch.xz

# extract the gcc optimizations archive
tar xf "enable_additional_cpu_optimizations-$_gcc_more_v.tar.gz"

# set kernel build options
export KBUILD_BUILD_HOST=debian
export KBUILD_BUILD_USER=linux-ck
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

# clone this repository
git clone "https://github.com/godzm4tt3o/pkgbuilds"

# copy patches to kernel folder
cp pkgbuilds/linux-ck/000[1-4]*.patch linux-$pkgver

# enter the kernel folder
cd linux-$pkgver

echo "Setting version..."
scripts/setlocalversion --save-scmversion
echo "-$pkgrel" > localversion.10-pkgrel
echo "${pkgbase#linux}" > localversion.20-pkgname

# apply patches
for patch in $(ls | grep "patch"); do
	patch -Np1 < $patch
done

# copy configuration to current folder
echo "Setting config..."
cp $kerneldir/pkgbuilds/linux-ck/config .config

# disable CONFIG_DEBUG_INFO=y at build time otherwise memory usage blows up
# and can easily overwhelm a system with 32 GB of memory using a tmpfs build
# partition ... this was introduced by FS#66260, see:
# https://git.archlinux.org/svntogit/packages.git/commit/trunk?h=packages/linux&id=663b08666b269eeeeaafbafaee07fd03389ac8d7
scripts/config --disable CONFIG_DEBUG_INFO
scripts/config --disable CONFIG_CGROUP_BPF
scripts/config --disable CONFIG_BPF_LSM
scripts/config --disable CONFIG_BPF_PRELOAD
scripts/config --disable CONFIG_BPF_LIRC_MODE2
scripts/config --disable CONFIG_BPF_KPROBE_OVERRIDE

# https://bbs.archlinux.org/viewtopic.php?pid=1824594#p1824594
scripts/config --enable CONFIG_PSI_DEFAULT_DISABLED

# https://bbs.archlinux.org/viewtopic.php?pid=1863567#p1863567
scripts/config --disable CONFIG_LATENCYTOP
scripts/config --disable CONFIG_SCHED_DEBUG

# FS#66613
# https://bugzilla.kernel.org/show_bug.cgi?id=207173#c6
scripts/config --disable CONFIG_KVM_WERROR

# apply optimizations
$kerneldir/pkgbuilds/linux-ck/tune-config

# fix naming schema in EXTRAVERSION of ck patch set
sed -i -re "s/^(.EXTRAVERSION).*$/\1 = /" "../${_ckpatch}"

# copy ck patchset to kernel folder
cp $kerneldir/$_ckpatch .

# ck patchset itself
echo "Patching with ck patchset..."
patch -Np1 -i "$_ckpatch"

# non-interactively apply ck1 default options
# this isn't redundant if we want a clean selection of subarch below
make olddefconfig

# copy GCC optimizations patch to kernel folder
cp "$kerneldir/kernel_gcc_patch-$_gcc_more_v/enable_additional_cpu_optimizations_for_gcc_v10.1+_kernel_v5.8+.patch" .

# https://github.com/graysky2/kernel_gcc_patch
# make sure to apply after olddefconfig to allow the next section
echo "Patching to enable GCC optimization for other uarchs..."
patch -Np1 -i "enable_additional_cpu_optimizations_for_gcc_v10.1+_kernel_v5.8+.patch"

if [ -n "$_subarch" ]; then
  # user wants a subarch so apply choice defined above interactively via 'yes'
  yes "$_subarch" | make oldconfig
else
  # no subarch defined so allow user to pick one
  make oldconfig
fi

# copy module database to kernel directory
cp "../pkgbuilds/linux-ck/modprobed.db" .

### Load needed modules for the make localmodconfig
# See https://aur.archlinux.org/packages/modprobed-db
echo "Running Steven Rostedt's make localmodconfig now"

if [ -f "$HOME/.config/modprobed.db" ]; then
  echo "Using modprobed.db in $HOME/.config! "
  make LSMOD="$HOME/.config/modprobed.db" localmodconfig
else if [ -f "$(pwd)/modprobed.db" ]; then
  echo "Using modprobed.db in $(pwd)! "
  make LSMOD="$(pwd)/modprobed.db" localmodconfig
fi
fi

make -s kernelrelease > version
echo "Prepared $pkgbase version $(<version)"

[[ -z "$_makenconfig" ]] || make nconfig

# save configuration for later reuse
cat .config > "$kerneldir/linux-${pkgver}/config.last"

# uncomment if you want to build with distcc
### sed -i '/HAVE_GCC_PLUGINS/d' arch/x86/Kconfig

# build the kernel, creating a debian package
make-kpkg clean
# nproc is the number of available CPU processors
fakeroot make-kpkg -j$(nproc) --initrd --append-to-version="${pkgbase#linux}" binary

# enable Ubuntu splash screen before boot
echo vesafb | sudo tee -a /etc/initramfs-tools/modules
echo fbcon | sudo tee -a /etc/initramfs-tools/modules

# install the generated packages with dpkg
sudo dpkg -i *.deb

# create the initramfs
# (it should automatically be generated)
#cd /boot
#sudo mkinitramfs -k -o initrd.img-$pkgver-$pkgbase $pkgver-$pkgbase
sudo update-grub

# the kernel should now be built and ready to be installed
echo "Finished building and installing! "
